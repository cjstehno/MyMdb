import groovy.sql.Sql
import java.sql.Timestamp

/*
 * EXPERIMENTAL
 *
 * This importer imports the .dat file generated by the exporter and imports it into
 * an empty MySql database. It does not drop any existing tables; however, it will
 * remove any existing data from all content data tables. User and security data
 * will remain unchanged.
 *
 * It is currently NOT transactional, and the first thing it does is delete all
 * data from the content tables.
 *
 * This tool is not meant for general use. Use it at your own risk.
 *
 * groovy ImportMyMdb.groovy DAT_FILE DB_USER DB_PASS
 */
class ImportMyMdb {

    static def main( args ){
        println "Importing ${args[0]}..."
        
        def inf
        try {
            def sql = Sql.newInstance('jdbc:mysql://localhost:3306/mymdb', args[1], args[2], 'com.mysql.jdbc.Driver')

            inf = new DataInputStream( new FileInputStream( new File(args[0]) ) )
            clearTables sql
            insertGenres sql, importGenres( sql, inf )
            insertActors sql, importActors( sql, inf )
            insertMovieGenres sql, importMovieGenres(sql, inf)
            insertMovieActors sql, importMovieActors(sql, inf)
            insertMovies sql, importMovies(sql, inf)

        } finally {
            if( inf ) inf.close()
        }

        println 'Done.'
    }

    static private def clearTables( sql ){
        sql.execute 'delete from movie_genres'
        sql.execute 'delete from movie_actors'
        sql.execute 'delete from genre'
        sql.execute 'delete from actor'
        sql.execute 'delete from movie'
    }

    static private def importMovies( sql, inf ){
        def count = inf.readInt()

        def movies = []
        count.times {
            def mov = [:]
            mov.id = inf.readLong()
            mov.title = inf.readUTF()
            mov.version = inf.readLong()
            mov.description = inf.readUTF()
            mov.release_year = inf.readInt()
            mov.storage_name = inf.readUTF()
            mov.storage_index = inf.readInt()
            mov.date_created = inf.readLong()
            mov.last_update = inf.readLong()

            byte[] bytes = new byte[inf.readInt()]
            inf.read(bytes)
            mov.poster = bytes
            
            movies << mov
        }

        println "Loaded ${movies.size()} movies."

        movies
    }

    static private def insertMovies( sql, data ){
        def count = 0
        data.each {
            count += sql.executeUpdate(
                'insert into movie (id,title,version,description,release_year,storage_name,storage_index,date_created,last_update,poster) values (?,?,?,?,?,?,?,?,?,?)',
                [it.id,it.title,it.version,it.description,it.release_year,it.storage_name,it.storage_index,time(it.date_created),time(it.last_update),(it.poster as byte[])]
            )
        }

        println "Inserted $count movies..."
    }

    static private def time( ms ){
        ms != -1 ? new Timestamp(ms) : null
    }

    static private def importMovieGenres( sql, inf ){
        def count = inf.readInt()

        def movie_genres = []
        count.times {
            def mg = [:]
            mg.movie_id = inf.readLong()
            mg.genre_id = inf.readLong()
            movie_genres << mg
        }

        println "Loaded ${movie_genres.size()} movie genres..."

        movie_genres
    }

    static private def insertMovieGenres( sql, data ){
        def count = 0
        data.each {
            count += sql.executeUpdate( 'insert into movie_genres (movie_id,genre_id) values (?,?)', [it.movie_id, it.genre_id] )
        }

        println "Inserted $count movie genres..."
    }

    static private def importMovieActors( sql, inf ){
        def count = inf.readInt()

        def movie_actors = []
        count.times {
            def ma = [:]
            ma.movie_id = inf.readLong()
            ma.actor_id = inf.readLong()
            movie_actors << ma
        }

        println "Loaded ${movie_actors.size()} movie actors..."

        movie_actors
    }

    static private def insertMovieActors( sql, data ){
        def count = 0
        data.each {
            count += sql.executeUpdate( 'insert into movie_actors (movie_id,actor_id) values (?,?)', [it.movie_id, it.actor_id] )
        }

        println "Inserted $count movie actors..."
    }

    static private def importActors( sql, inf ){
        def count = inf.readInt()

        def actors = []
        count.times {
            def actor = [:]
            actor.id = inf.readLong()
            actor.version = inf.readLong()
            actor.first_name = inf.readUTF()
            actor.middle_name = inf.readUTF()
            actor.last_name = inf.readUTF()
            actors << actor
        }

        println "Loaded ${actors.size()} actors..."

        actors
    }

    static private def insertActors( sql, data ){
        def count = 0
        data.each {
            count += sql.executeUpdate( 
                'insert into actor (id,version,first_name,middle_name,last_name) values (?,?,?,?,?)',
                [it.id, it.version, it.first_name, it.middle_name, it.last_name]
            )
        }

        println "Inserted $count actors..."
    }

    static private def importGenres( sql, inf ){
        def count = inf.readInt()

        def genres = []
        count.times {
            def genre = [:]
            genre.id = inf.readLong()
            genre.version = inf.readLong()
            genre.name = inf.readUTF()
            genres << genre
        }

        println "Loaded ${genres.size()} genres..."

        genres
    }

    static private def insertGenres( sql, data ){
        def count = 0
        data.each {
            count += sql.executeUpdate( 'insert into genre (id,version,name) values (?,?,?)', [it.id, it.version, it.name] )
        }

        println "Inserted $count genres..."
    }
}

